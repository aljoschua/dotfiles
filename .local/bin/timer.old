#!/bin/bash
# Screen flash as option? # measure time error in seconds and account for it # format output
# --help --version? # float? # timer keeps track of multiplie timers, and $ timer lists them
# doesnt work if no title is added

# user systemd-run --user --on-calendar="`date --date '123 seconds'`" --timer-property=AccuracySec=1s cmd
sound=/usr/share/mint-artwork/sounds/plug.oga
repetitions=5

function beep(){
    for i in {1..$repetitions}; do
        play "$sound" 2>/dev/null
    done
}
function say(){
    echo -en "\t\t\t\t\t\r$*"
    #echo -e "\e[1A\r$*\t\t\t"
}
function usage(){
    echo "usage: $0 NUMBER[SUFFIX]
    NUMBER\t unsigned integer
    SUFFIX\t s seconds(default), m minutes, h hours" #, d days
    exit 1
}


shopt -s extglob
timeInSeconds=0
factor=1

if [ $# = "0" ]; then
    # list timers from logs/timers
    echo -n "\r"
fi
name=unnamed
#[[ $1 =~ ^[a-zA-Z]*$ ]] && name=$1; shift # also captures 1s, 5s 1m

until [ $# = "0" ] ; do
    case $1 in
        # +([0-9])d) let "factor*=24";&
        +([0-9])h) let "factor*=60";&
        +([0-9])m) let "factor*=60";;
        !(+([0-9])?(s))) usage;;
    esac
    timeInSeconds=`expr $timeInSeconds + "$1" : '\(.[0-9]*\)' \* $factor`

    shift
done

echo "$name `date +%H:%M:%S` $timeInSeconds" >> ~/.my/logs/timers

function func(){
    until [ "0" = "$timeInSeconds" ]; do
        say Time left on timer "$name": `date -d@$timeInSeconds -u +%T`
        let 'timeInSeconds-=1'
        sleep 1
    done

    say Timer $name finished at `date +%H:%M:%S`

    echo

    beep

}
func
