# check for which $TERM it is and decern colors
# TERM linux only has 8 different colors (for background at least)
# light blue = 20, light green  = 40, blue = 80, red = 160, purple = 200

prompt_test() {
    for((i=16; i<256; i++)); do
        printf "\e[48;5;${i}m%03d" $i
        printf '\e[0m'
        printf ' ' || printf '\n'
    done
}




__reset=0
__bold=1
__dim=2
__underlined=4
__blink=5
__inverted=7
__hidden=8


__fg_default=39
__fg_black=30
__fg_red=31
__fg_green=32
__fg_yellow=33
__fg_blue=34
__fg_magenta=35
__fg_cyan=36
__fg_light_gray=37
__fg_dark_gray=90
__fg_light_red=91
__fg_light_green=92
__fg_light_yellow=93
__fg_light_blue=94
__fg_light_magenta=95
__fg_light_cyan=96
__fg_white=97

__bg_default=49
__bg_black=40
__bg_red=41
__bg_green=42
__bg_yellow=43
__bg_blue=44
__bg_magenta=45
__bg_cyan=46
__bg_light_gray=47
__bg_dark_gray=100
__bg_light_red=101
__bg_light_green=102
__bg_light_yellow=103
__bg_light_blue=104
__bg_light_magenta=105
__bg_light_cyan=106
__bg_white=107

__execution_time_file=$TMPDIR/bashtime.$USER.$BASHPID
__default_ps1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ ' # Default from /etc/skel/.bashrc

__get_execution_time() {
    if [ -f $__execution_time_file ]; then
        echo $(($(date +%s)-$(cat $__execution_time_file)))
        /bin/rm $__execution_time_file
    else
        echo 0
    fi
}

__prompt_change_color() {
    for c in $*; do
        PS1+="\[\e[${c}m\]"
    done
}

__prompt_add_segment() { # pad should be prepended and not appended (except for first segment)
    local pad=" "
    if [ "$1" = '-?' ]; then
        pad=
        shift
    fi

    local string="$1"
    shift


    # Check if \n is contained in string
    # Check if string is bigger than columns ?
    # Remove padding if it string would hit columns exactly ?
    if (( ${#string} + $__prompt_current_length > $COLUMNS )); then
        PS1+="\n"
        __prompt_current_length=0
    else
        __prompt_current_length=$(( $__prompt_current_length+${#string}+${#pad} ))
    fi

    __prompt_change_color $__bold $* # make everything bold for better readability
    PS1+="$string"
    __prompt_change_color $__reset
    PS1+=$pad
}

__print_job() {
    local j="$1"
    local pid=$(cut -d' ' -f2 <<< $j)
    local status=$(cut -d' ' -f3 <<< $j)
    local command=$(awk '
    $4 == "(tty" { $4=$5=""; left+=2 }
    $NF == "&" { $NF=""; right+=1 }
    { $1=$2=$3=""; left+=4; print substr($0, left, length()-left-right+1) }
    ' <<< $j)


    local colour
    case "$status" in
        Stopped)
            colour="$__fg_red $__bg_black"
            ;;
        Running)
            colour="$__fg_green $__bg_black"
            ;;
        Terminated)
            ;&
        Done)
            return
            ;;
        *)
            colour="$__fg_white"
            ;;
    esac
    __prompt_add_segment -? "$pid" $colour
    __prompt_add_segment "|$command"
}


__jobs() {
    while read line; do
        __print_job "$line"
    done < <(jobs -l)
}

__git() {
    # doesn't work when there are no commits ( no HEAD )

    git status >/dev/null 2>/dev/null
    if [ $? = 0 ]; then
        __prompt_add_segment "$(git rev-parse --abbrev-ref HEAD)" $__fg_blue
    fi
}

prompt_off() {
    __custom_prompt=no
}

prompt_on() {
    __custom_prompt=yes
}

# Check for $COLORTERM=truecolor ?
__build_prompt() {
    local returncode=$?

    # VTs dont support blinking
    if [ $TERM = ... ]; then
        # Check for $COLORTERM=truecolor ?
        echo -n
    fi

    if [ $USER@$HOSTNAME = aljoschua@430-G5 ]; then
        local color_primary="48;5;200"
        local color_secondary="48;5;80 $__fg_black"
    else
        local color_primary="48;5;80 $__fg_black"
        local color_secondary="48;5;200"
    fi

    local segment_human_time="$color_primary"
    local segment_power="$color_secondary"
    local segment_user="$color_primary"
    local segment_host="$color_secondary"
    local segment_return_code="$color_primary"
    local segment_bash_version="$color_secondary"
    local segment_execution_time="$color_primary"
    local segment_working_directory="$color_secondary"


    __prompt_current_length=0

    if [ "$__custom_prompt" = no ]; then
        PS1="$__default_ps1"
        return
    fi

    PS1=

    __prompt_add_segment $(date +%T)  $segment_human_time # time

    if command -v upower >/dev/null; then
        if $(upower -d 2>/dev/null >/dev/null); then
            if $(upower -d | grep -e "state: \+discharging" >/dev/null); then
                local charge
                charge=$(upower -d | grep -m1 percentage | cut -d' ' -f15)
                (( ${charge%\%} <= 30 )) && local blink=$__blink
                __prompt_add_segment $charge $segment_power $blink
            fi
        fi
    fi

    if [ $USER != aljoschua ]; then
        __prompt_add_segment $USER $segment_user
    fi

    if [ $HOSTNAME != 430-G5 ]; then
        __prompt_add_segment "@$HOSTNAME" $segment_host
    fi

    if [ "$returncode" != 0 ]; then  # exit code of previous command
        __prompt_add_segment $returncode $segment_return_code
    fi

    local version="${BASH_VERSINFO[0]}.${BASH_VERSINFO[1]}.${BASH_VERSINFO[2]}"
    __prompt_add_segment $version $segment_bash_version  # bash version

    local execution_total execution_seconds execution_minutes execution_hours time_string
    execution_total=$(__get_execution_time)
    if (( execution_total > 5 )); then
        execution_seconds=$(( execution_total % 60 ))
        execution_minutes=$(( (execution_total / 60) % 60 ))
        execution_hours=$(( (execution_total / 3600) ))

        if (( execution_hours != 0 )); then
            time_string+=`printf '%02d:' $execution_hours`
        fi

        time_string+=`printf '%02d:' $execution_minutes`
        time_string+=`printf '%02d' $execution_seconds`
        __prompt_add_segment ${time_string} $segment_execution_time
    fi

    ## jobs ##
    __jobs

    ## Git ##
    __git

    if [ "$(pwd)" != ~ ]; then # working directory
        __prompt_add_segment "$(realpath -s --relative-base=$HOME $(pwd))" $segment_working_directory
    fi

    __prompt_add_segment  '\n\$' # end
    #__prompt_change_color $__fg_magenta $__bold
}
PS0="\$(echo \$(date +%s) > $__execution_time_file)"
PS2=
PROMPT_COMMAND=__build_prompt

